##Bash scripting Notes###

Shell script consists of

1.Shell keywords --if,else,do,done
2.shell commands
3.Linux bin commands---w, who
4.Text processing utilities --->grep,sed,cut
5.Functions-->to store the repetitive tasks
6.control flow --> statements and loops


1. /etc/profile - The systemwide initialization file, executed for login shells.
2. /etc/bash.bashrc - The systemwide per-interactive-shell startup file. This is a non-standard file which may not
exist on your distribution. Even if it exists, it will not be sourced unless it is done explicitly in another start-up
file.
3. /etc/bash.logout - The systemwide login shell cleanup file, executed when a login shell exits.
4. $HOME/.bash_profile - The personal initialization file, executed for login shells.
5. $HOME/.bashrc - The individual per-interactive-shell startup file.
6. $HOME/.bash_logout - The individual login shell cleanup file, executed when a login shell exits.
7. $HOME/.inputrc - Individual readline initialization file.

Shebang:
========
#!/bin/bash
to indicate an interpreter for execution under UNIX / Linux operating systems. If you do not specify an interpreter line, the default is usually the /bin/sh.

Multiple Line Comment
======================
use << to to comment the multiple lines
example:
========
<<COMMENT1
Master LDAP server : dir1.nixcraft.net.in
Add user to master and it will get sync to backup server too
Profile and active directory hooks are below
COMMENT1

Script debug:
=============
bash -xv script-name
bash -n script-name

Pro tip:
========

echo -e "Today is \c";date --->to print the date output inside the character(\c).
\n --->new line

Variables:
==========
system varibles: PATH, HOME, etc
User defined: To define the script location to detect the script.

path=/home/sakthi
export the globally in /etc/environment
for changes alone in any user $HOME/.bashrc

To see all the variables, use
#env

$# number of arguments
$@ to list all the arguments supplied in script
$$ current script process id
$RANDOM returns random number every time

basename -s jpg -a *
s is used to ignore the suffix strings mentioned

Bash arithmetic:
================
let "a= 3+4" ; echo $a
+, -, \*, / 	addition, subtraction, multiply, divide
var++ 	Increase the variable var by 1
var-- 	Decrease the variable var by 1
% 	Modulus (Return the remainder after division)

To print decimal numbers,
use bash built in printf

let a=3/4 ; printf "%0.2f" $a

Export varibles:
================
export var; to export the varibles to nested scripts

printf:
======
printf "$VARIABLE_NAME\n"
printf "String %s" $VARIABLE_NAME
printf "Signed Decimal Number %d" $VARIABLE_NAME
printf "Floating Point Number %f" $VARIABLE_NAME
printf "string %s" 

xargs usage:
============
to replace all txt extension to sh

ls *txt | xargs basename -s .txt -a | xargs -n1 -i mv {}.txt {}.sh

-n1 ==== execute one by one argument

Arithmetic using bash:
======================

use let for simple arithmetic:
===============================
usage
let a=3+4
or
let "a = 3 + 4"
python -c "print (${a}/${b})"
 awk "BEGIN {print (20+5)/2}"
to get exact float points use above command. There is no particular commands available in bash

printf %.10f\\n "$((10**9 * 20/7))e-9"   # many shells. Not mksh.
$ echo "$((20.0/7))"                       # (ksh93/zsh/yash, not bash)
$ awk "BEGIN {print (20+5)/2}"
$ zcalc
$ bc <<< 20+5/2
$ bc <<< "scale=4; (20+5)/2"
$ dc <<< "4 k 20 5 + 2 / p"
$ expr 20 + 5
$ calc 2 + 4
$ node -pe 20+5/2  # Uses the power of JavaScript, e.g. : node -pe 20+5/Math.PI
$ echo 20 5 2 / + p | dc 
$ echo 4 k 20 5 2 / + p | dc 
$ perl -E "say 20+5/2"
$ python -c "print(20+5/2)"
$ python -c "print(20+5/2.0)"
$ clisp -x "(+ 2 2)"
$ lua -e "print(20+5/2)"
$ php -r 'echo 20+5/2;'
$ ruby -e 'p 20+5/2'
$ ruby -e 'p 20+5/2.0'
$ guile -c '(display (+ 20 (/ 5 2)))'
$ guile -c '(display (+ 20 (/ 5 2.0)))'
$ slsh -e 'printf("%f",20+5/2)'
$ slsh -e 'printf("%f",20+5/2.0)'
$ tclsh <<< 'puts [expr 20+5/2]'
$ tclsh <<< 'puts [expr 20+5/2.0]'
$ sqlite3 <<< 'select 20+5/2;'
$ sqlite3 <<< 'select 20+5/2.0;'
$ echo 'select 1 + 1;' | sqlite3 
$ psql -tAc 'select 1+1'
$ R -q -e 'print(sd(rnorm(1000)))'
$ r -e 'cat(pi^2, "\n")'
$ r -e 'print(sum(1:100))'
$ smjs
$ jspl




Stream Editor:
==============

1.Display line multiple times
=============================
sed '2p' file.txt ----------> It will display the 2line 2times.

sed -n '2p' file.txt--------->It will display only the 2line

2.Display last line:
====================
use $ to display last line.
use p to print the line

-n--------->it is the option to display only particular thing

sed -n '$p' file.txt -------------->to display only last line

3.Display range of files.
=========================

sed -n '2,4p' file.txt ----------->to display only 2nd,3rd,4th line


4. How to skip particular line:
===============================
use ! before p to skip the print of the line

sed -n '2!p' file.txt -------------->to display all lines except 2nd line

5. Context addressing.
========================
Display particular word presented line.

sed -n '/ssn/p' file.txt---------------> to display the line which contains only ssn

sed -n '/[Ss]n/p' file.txt-------------> to display the line which contain only ssn with ignoring case.








